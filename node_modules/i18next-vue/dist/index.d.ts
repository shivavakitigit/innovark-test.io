import * as vue from 'vue';
import { App } from 'vue';
import { TFunction, i18n, TOptions } from 'i18next';

declare type SimpleTFunction = (key: string, options?: TOptions | string) => string;
declare type Messages = {
    [index: string]: string | Messages;
};
declare module 'vue' {
    interface ComponentCustomProperties {
        $t: TFunction;
        $i18next: i18n;
    }
}
declare module 'vue' {
    interface ComponentCustomOptions {
        __i18n?: string[];
        i18nOptions?: {
            lng?: string;
            keyPrefix?: string;
            namespaces?: string | string[];
            messages?: Messages;
        };
    }
}
interface VueI18NextOptions {
    i18next: i18n;
    rerenderOn?: ('languageChanged' | 'loaded' | 'added' | 'removed')[];
}
declare function install(app: App, { i18next, rerenderOn, }: VueI18NextOptions): void;
declare function useTranslation(): {
    i18next: i18n;
    t: SimpleTFunction;
};
declare const TranslationComponent: vue.DefineComponent<{
    translation: {
        type: StringConstructor;
        required: true;
    };
}, () => (string | vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>)[], unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    translation: {
        type: StringConstructor;
        required: true;
    };
}>>, {}>;

export { TranslationComponent, install as default, useTranslation };
